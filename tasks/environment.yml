---

# Shibboleth SP certificate

- name: ensure shibboleth cert exists
  stat:
    path: "{{ SHIBBOLETH_CERTIFICATE_PATH }}/sp-cert.pem"
  register: shibboleth_cert

- name: ensure shibboleth privkey exists
  stat:
    path: "{{ SHIBBOLETH_CERTIFICATE_PATH }}/sp-key.pem"
  register: shibboleth_privkey

- name: debug shibboleth cert exists
  debug:
    msg: "There is no shibboleth cert at {{ SHIBBOLETH_CERTIFICATE_PATH }}/sp-cert.pem"
  when: not shibboleth_cert.stat.exists

- name: debug shibboleth privkey exists
  debug:
    msg: "There is no shibboleth privkey at {{ SHIBBOLETH_CERTIFICATE_PATH }}/sp-key.pem"
  when: not shibboleth_privkey.stat.exists

- name: fail shibboleth ssl
  fail:
    msg: "Fail shibboleth ssl configs see above"
  when:
    - not shibboleth_privkey.stat.exists or not shibboleth_cert.stat.exists
    - not HEXAA_GENERATE_SELFSIGNED


# Apache HTTP certificate

- name: ensure webserver cert exists
  stat:
    path: "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/fullchain.pem"
  register: webserver_cert

- name: ensure webserver privkey exists
  stat:
    path: "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/privkey.pem"
  register: webserver_privkey

- name: debug webserver cert exists
  debug:
    msg: "There is no webserver cert at {{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/fullchain.pem"
  when: not webserver_cert.stat.exists

- name: debug webserver privkey exists
  debug:
    msg: "There is no webserver privkey at {{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/privkey.pem"
  when: not webserver_privkey.stat.exists


- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  openssl_privatekey:
    path: "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/privkey.pem"
  when:
    - HEXAA_GENERATE_SELFSIGNED
    - not webserver_privkey.stat.exists

- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path:            "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/csr.csr"
    privatekey_path: "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/privkey.pem"
    common_name:     "{{ HEXAA_FRONTEND_URL_HOST }}"
  when:
    - HEXAA_GENERATE_SELFSIGNED
    - not webserver_cert.stat.exists

- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
    path:            "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/fullchain.pem"
    privatekey_path: "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/privkey.pem"
    csr_path:        "{{ HEXAA_FRONTEND_CERTIFICATE_PATH }}/csr.csr"
    provider: selfsigned
  when:
    - HEXAA_GENERATE_SELFSIGNED
    - not webserver_cert.stat.exists
  notify:
    - restart frontend-web


- name: fail webserver ssl
  fail:
    msg: "Fail webserver ssl configs see above"
  when:
    - not HEXAA_GENERATE_SELFSIGNED
    - not webserver_privkey.stat.exists or not webserver_cert.stat.exists


- name: use the normal config on port 80
  set_fact:
    apache_default_conf: default-hexaa.conf
    handle_ssl: false
  when:
    - HEXAA_FRONTEND_URL_PROTO == "http" or HEXAA_FRONTEND_WEB_BEHIND_PROXY
- name: use the redirect config on port 80
  set_fact:
    apache_default_conf: default-hexaa-ssl-redirect.conf
    handle_ssl: true
  when:
    - HEXAA_FRONTEND_URL_PROTO == "https"
    - not HEXAA_FRONTEND_WEB_BEHIND_PROXY

# Misc

- name: Set scoped key from backend variable
  set_fact:
    HEXAA_FRONTEND_SCOPED_KEY: "{{ HEXAA_BACKEND_MASTERKEY.defaultMasterKey }}"
  when:
    - HEXAA_FRONTEND_SCOPED_KEY == ""
    - HEXAA_BACKEND_MASTERKEY is defined
    - HEXAA_BACKEND_MASTERKEY.defaultMasterKey is defined

- fail:
    msg: "The HEXAA backend master key is missing (HEXAA_FRONTEND_SCOPED_KEY or HEXAA_BACKEND_MASTERKEY.defaultMasterKey)"
  when: HEXAA_FRONTEND_SCOPED_KEY == ""

- fail:
    msg: "The HEXAA backend secret is missing"
  when: HEXAA_BACKEND_SECRET == ""


- name: set network list for the main HTTP server container
  set_fact:
    docker_networks: [{name: "{{ docker_network_name_frontend }}",
                       aliases: ["{{ HEXAA_FRONTEND_URL_HOST | regex_replace(':[0-9]+') }}"]  }]
  tags: [web]
- set_fact:
    docker_networks: "{{ [{'name':  docker_network_name_backend}] + docker_networks }}"
  when: docker_network_name_backend is defined
  tags: [web]


- name: create config directory
  file:
    path: "{{ HEXAA_HOST_DIR }}/config/frontend"
    state: directory
  register: frontend_config_dir
  notify:
    - restart frontend
  tags: web
- name: create ansible generated
  file:
    path: "{{ frontend_config_dir.path }}/00_GENERATED_BY_ANSIBLE"
    state: touch
  changed_when: false
- name: create parameters.yml from template
  template:
    src: parameters.yml.j2
    dest: "{{ frontend_config_dir.path }}/parameters.yml"
  notify:
    - restart frontend

- name: create log dir
  file:
    path: "{{ HEXAA_HOST_DIR }}/logs/frontend"
    state: directory
    mode: ugo+rwxt
  register: log_dir
  notify:
    - restart frontend

- name: copy Shibboleth and Apache config
  copy:
    src: files/
    dest: "{{ frontend_config_dir.path }}"
  notify:
    - restart frontend-web
  tags: [web]

- name: create shibboleth config dir
  file:
    path: "{{ frontend_config_dir.path }}/shibboleth/"
  tags: [web]

- name: copy optional certs for shibboleth from parent playbook
  copy:
    src: files/shib_certs
    dest: "{{ frontend_config_dir.path }}/shibboleth/"
  ignore_errors: yes
  notify:
    - restart frontend-web
  tags: [web]

- name: create shibboleth2.xml from template
  template:
    src: shibboleth2.xml.j2
    dest: "{{ frontend_config_dir.path }}/shibboleth/shibboleth2.xml"
  notify:
    - restart frontend-web
  tags: [web]
